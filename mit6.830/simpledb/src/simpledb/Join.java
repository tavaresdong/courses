package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 * This implementation used nested loop join,
 * We can also use hash join or merge join methods, but they have their
 * restrictions.
 */
public class Join extends AbstractDbIterator {

    private JoinPredicate _p;
    private DbIterator _child1;
    private DbIterator _child2;
    private ArrayList<Tuple> _child;
    private Iterator<Tuple> _it;
    private TupleDesc _td;
    
    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        _p = p;
        _child1 = child1;
        _child2 = child2;
        _td = TupleDesc.combine(_child1.getTupleDesc(), 
                                _child2.getTupleDesc());
        _child = new ArrayList<Tuple>();
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return _td;
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        // some code goes here
        _child1.open();
        _child2.open();
        while (_child1.hasNext()) {
            Tuple t1 = _child1.next();
            _child2.rewind();
            while (_child2.hasNext()) {
                Tuple t2 = _child2.next();
                if (_p.filter(t1, t2)) {
                    Tuple t = new Tuple(_td);
                    int i = 0;
                    for (; i < t1.getTupleDesc().numFields(); i++) {
                        t.setField(i, t1.getField(i));
                    }
                    
                    for (int j = 0; j < t2.getTupleDesc().
                                    numFields(); j++) {
                        t.setField(i + j, t2.getField(j));
                    }
                    _child.add(t);
                }
            }
        }
        _it = _child.iterator();
    }

    public void close() {
        // some code goes here
        _it = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        _it = _child.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (_it != null && _it.hasNext()) {
            return _it.next();
        } else {
            return null;
        }
    }
}
