package main

import "os"
import "fmt"
import "mapreduce"
import "strings"
import "unicode"
import "strconv"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	res = make([]mapreduce.KeyValue, 0)
	wc := make(map[string]int)
	begin, end, doclen := 0, 0, len(value)
	for ; end < doclen; {
		if !unicode.IsLetter(rune(value[begin])) {
			begin = begin + 1
			end = begin
		} else if !unicode.IsLetter(rune(value[end])) {
			// 
			key := string(value[begin:end])
			_, ok := wc[key]
			if ok == false {
				wc[key] = 1
				var kv mapreduce.KeyValue
				kv.Key = key
				kv.Value = document
				res = append(res, kv)
			}
			end = end + 1
			begin = end
		} else {
			end = end + 1
		}
	}

	// The last piece of word
	if begin != end {
		key := string(value[begin:end])
			_, ok := wc[key]
			if ok == false {
				wc[key] = 1
				var kv mapreduce.KeyValue
				kv.Key = key
				kv.Value = document
				res = append(res, kv)
			}
	}

	// Named return value: res
	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	res := strconv.Itoa(len(values))
	res += " "
	res += strings.Join(values, ",")
	return res
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
